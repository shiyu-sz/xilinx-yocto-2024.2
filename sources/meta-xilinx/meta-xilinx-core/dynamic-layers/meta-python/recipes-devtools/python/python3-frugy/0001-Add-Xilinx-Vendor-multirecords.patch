From 3e2a47e1b205a6225d11a0de2544032d756d6ee8 Mon Sep 17 00:00:00 2001
From: Jonathan Stroud <jonathan.stroud@amd.com>
Date: Wed, 23 Apr 2025 14:17:05 -0600
Subject: [PATCH 1/4] Add Xilinx Vendor multirecords

Add support for Xilinx multirecord formats D2 and D3.

Signed-off-by: Jonathan Stroud <jonathan.stroud@amd.com>
---
 frugy/fru.py                 |   1 +
 frugy/fru_registry.py        |   1 +
 frugy/multirecords_xilinx.py | 124 +++++++++++++++++++++++++++++++++++
 frugy/types.py               |  41 ++++++++++++
 requirements.txt             |   1 +
 5 files changed, 168 insertions(+)
 create mode 100644 frugy/multirecords_xilinx.py

diff --git a/frugy/fru.py b/frugy/fru.py
index b66a2bb..0a9b63b 100644
--- a/frugy/fru.py
+++ b/frugy/fru.py
@@ -16,6 +16,7 @@ from frugy.multirecords import MultirecordArea
 import frugy.multirecords_ipmi
 import frugy.multirecords_picmg
 import frugy.multirecords_fmc
+import frugy.multirecords_xilinx
 import yaml
 from bidict import bidict
 import os
diff --git a/frugy/fru_registry.py b/frugy/fru_registry.py
index dc08d0b..2e1e6de 100644
--- a/frugy/fru_registry.py
+++ b/frugy/fru_registry.py
@@ -22,6 +22,7 @@ class FruRecordType(Enum):
     picmg_secondary = auto()
     fmc_multirecord = auto()
     fmc_secondary = auto()
+    xilinx_multirecord = auto()
 
 
 _registry = defaultdict(list)
diff --git a/frugy/multirecords_xilinx.py b/frugy/multirecords_xilinx.py
new file mode 100644
index 0000000..8aeaedb
--- /dev/null
+++ b/frugy/multirecords_xilinx.py
@@ -0,0 +1,124 @@
+###########################################################################
+#      ____  _____________  __    __  __ _           _____ ___   _        #
+#     / __ \/ ____/ ___/\ \/ /   |  \/  (_)__ _ _ __|_   _/ __| /_\  (R)  #
+#    / / / / __/  \__ \  \  /    | |\/| | / _| '_/ _ \| || (__ / _ \      #
+#   / /_/ / /___ ___/ /  / /     |_|  |_|_\__|_| \___/|_| \___/_/ \_\     #
+#  /_____/_____//____/  /_/      T  E  C  H  N  O  L  O  G  Y   L A B     #
+#                                                                         #
+#          Copyright 2021 Deutsches Elektronen-Synchrotron DESY.          #
+#                    2025 Advanced Micro Devices, Inc.
+#                  SPDX-License-Identifier: BSD-3-Clause                  #
+#                                                                         #
+###########################################################################
+
+from frugy.types import *
+from frugy.multirecords import ipmi_multirecord, MultirecordEntry
+from frugy.fru_registry import FruRecordType, rec_register, rec_lookup_by_id
+
+
+# IPMI standard multirecords
+
+
+@ipmi_multirecord(0xd2)
+class OemXilinxEntry(MultirecordEntry):
+    ''' Platform Management FRU Information Storage Definition, Table 18-4 '''
+
+    _xilinx_identifier = 0x10da
+
+    def _payload_prologue(self):
+        return self._xilinx_identifier.to_bytes(3, 'little') + self._record_id.to_bytes(length=1, byteorder='little')
+
+    @classmethod
+    def from_payload(cls, payload):
+        xilinx_id, payload = payload[:3], payload[3:]
+        xilinx_id = int.from_bytes(xilinx_id, 'little')
+        rec_id, payload = payload[0], payload[1:]
+
+
+        if xilinx_id != cls._xilinx_identifier:
+            raise ValueError(
+                f"FMC identifier mismatch: expected 0x{cls._xilinx_identifier:06x}, received 0x{xilinx_id:06x} ({xilinx_id})")
+        try:
+            cls_inst = rec_lookup_by_id(
+                FruRecordType.xilinx_multirecord, rec_id)()
+        except KeyError:
+            raise RuntimeError(f"Unknown Xilinx entry 0x{rec_id:02x}")
+
+        cls_inst._deserialize(payload)
+        cls_inst._record_id = rec_id
+        return cls_inst
+
+
+@ipmi_multirecord(0xd3)
+class OemXilinxD3Entry(MultirecordEntry):
+    ''' Platform Management FRU Information Storage Definition, Table 18-4 '''
+
+    _xilinx_identifier = 0x10da
+
+    def _payload_prologue(self):
+        return self._xilinx_identifier.to_bytes(3, 'little')
+
+    @classmethod
+    def from_payload(cls, payload):
+        xilinx_id, payload = payload[:3], payload[3:]
+        rec_id = 0xd3
+
+        try:
+            cls_inst = rec_lookup_by_id(
+                FruRecordType.xilinx_multirecord, rec_id)()
+        except KeyError:
+            raise RuntimeError(f"Unknown Xilinx entry 0x{rec_id:02x}")
+
+        cls_inst._deserialize(payload)
+        cls_inst._record_id = rec_id
+        return cls_inst
+
+def xilinx_multirecord(rec_id):
+    def register_and_set_id(cls):
+        cls._record_id = rec_id
+        rec_register(cls, FruRecordType.xilinx_multirecord, rec_id)
+        return cls
+    return register_and_set_id
+
+@xilinx_multirecord(0x31)
+class dut_xilinx_mac(OemXilinxEntry):
+    _schema = [
+        ('mac0', MacField),
+        ('mac1', MacField, None),
+        ('mac2', MacField, None),
+        ('mac3', MacField, None),
+    ]
+
+    def to_dict(self):
+        result = super().to_dict()
+        new_result = {}
+        for key, value in result.items():
+            if (value != ''):
+                new_result[key] = value
+        return new_result
+
+
+
+@xilinx_multirecord(0x11)
+class sys_ctrl_xilinx_mac(OemXilinxEntry):
+    _schema = [
+        ('mac0', MacField),
+        ('mac1', MacField, None),
+        ('mac2', MacField, None),
+        ('mac3', MacField, None),
+    ]
+
+    def to_dict(self):
+        result = super().to_dict()
+        new_result = {}
+        for key, value in result.items():
+            if (value != ''):
+                new_result[key] = value
+        return new_result
+
+@xilinx_multirecord(0xd3)
+class xilinx_oem_d3(OemXilinxD3Entry):
+    _schema = [
+        ('data', FixedStringField, 80, {'default': ''}),
+    ]
+
diff --git a/frugy/types.py b/frugy/types.py
index f9aadf5..8df67f9 100644
--- a/frugy/types.py
+++ b/frugy/types.py
@@ -17,6 +17,7 @@ from itertools import zip_longest
 import uuid
 from bidict import bidict
 from ipaddress import IPv4Address
+from macaddress import MAC
 import logging
 
 _format_version_default = 1
@@ -378,6 +379,46 @@ class IpV4Field():
         return self.to_dict() != self._default
 
 
+class MacField():
+    ''' Field containing a IPv4 address '''
+    _shortname = 'mac'
+
+    _num_bytes = 6
+
+    def __init__(self, default='00:00:00:00:00:00', parent=None):
+        self._default = default
+        if (default == None):
+            self._value = None
+        else:
+            self._value = MAC(default)
+
+    def bit_size(self) -> int:
+        return self._num_bytes * 8
+
+    def serialize(self) -> bytearray:
+        if (self._value == None):
+            return b''
+        return int(self._value).to_bytes(self._num_bytes, 'big')
+
+    def deserialize(self, input: bytearray) -> bytearray:
+        tmp, remainder = input[:self._num_bytes], input[self._num_bytes:]
+        tmp = int.from_bytes(tmp, 'big')
+        if (tmp == 0):
+            self._value = ''
+        else:
+            self._value = MAC(tmp)
+        return remainder
+
+    def to_dict(self):
+        return str(self._value)
+
+    def update(self, value):
+        self._value = MAC(value)
+
+    def val_not_default(self):
+        return self.to_dict() != self._default
+
+
 class GuidField():
     ''' Field containing a 128-bit GUID '''
     _shortname = 'guid'
diff --git a/requirements.txt b/requirements.txt
index fdf557c..eeefe3d 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,3 +1,4 @@
 bitstruct>=8.0.0
 PyYAML>=5.1.0
 bidict>=0.20.0
+macaddress>=2.0.2
-- 
2.34.1

