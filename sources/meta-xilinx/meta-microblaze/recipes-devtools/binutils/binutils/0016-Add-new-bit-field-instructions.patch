From 39ef5af3dd4551b24a47c8e48af67478183a7149 Mon Sep 17 00:00:00 2001
From: Nagaraju Mekala <nmekala@xilix.com>
Date: Mon, 18 Jul 2016 12:24:28 +0530
Subject: [PATCH 16/53] Add new bit-field instructions

This patches adds new bsefi and bsifi instructions.
BSEFI- The instruction shall extract a bit field from a
register and place it right-adjusted in the destination register.
The other bits in the destination register shall be set to zero
BSIFI- The instruction shall insert a right-adjusted bit field
from a register at another position in the destination register.
The rest of the bits in the destination register shall be unchanged

Signed-off-by :Nagaraju Mekala <nmekala@xilix.com>

Conflicts:
	opcodes/microblaze-dis.c

Conflicts:
	gas/config/tc-microblaze.c
	opcodes/microblaze-opc.h

Signed-off-by: Aayush Misra <aayushm@amd.com>
---
 gas/config/tc-microblaze.c | 82 ++++++++++++++++----------------------
 opcodes/microblaze-dis.c   | 18 ++++++++-
 opcodes/microblaze-opc.h   |  6 +++
 3 files changed, 58 insertions(+), 48 deletions(-)

diff --git a/gas/config/tc-microblaze.c b/gas/config/tc-microblaze.c
index 62238646a52..f13efcae979 100644
--- a/gas/config/tc-microblaze.c
+++ b/gas/config/tc-microblaze.c
@@ -1150,88 +1150,76 @@ md_assemble (char * str)
       inst |= (reg2 << RA_LOW) & RA_MASK;
       inst |= (immed << IMM_LOW) & IMM5_MASK;
       break;
-
-    case INST_TYPE_RD_R1_IMMW_IMMS:
+ case INST_TYPE_RD_R1_IMM5_IMM5:
       if (strcmp (op_end, ""))
-	op_end = parse_reg (op_end + 1, &reg1);  /* Get rd.  */
+        op_end = parse_reg (op_end + 1, &reg1);  /* Get rd.  */
       else
 	{
-	  as_fatal (_("Error in statement syntax"));
-	  reg1 = 0;
-	}
-
+          as_fatal (_("Error in statement syntax"));
+          reg1 = 0;
+        }
       if (strcmp (op_end, ""))
-	op_end = parse_reg (op_end + 1, &reg2);  /* Get r1.  */
+        op_end = parse_reg (op_end + 1, &reg2);  /* Get r1.  */
       else
 	{
-	  as_fatal (_("Error in statement syntax"));
-	  reg2 = 0;
-	}
+          as_fatal (_("Error in statement syntax"));
+          reg2 = 0;
+        }
 
       /* Check for spl registers.  */
       if (check_spl_reg (&reg1))
-	as_fatal (_("Cannot use special register with this instruction"));
+        as_fatal (_("Cannot use special register with this instruction"));
       if (check_spl_reg (&reg2))
-	as_fatal (_("Cannot use special register with this instruction"));
+        as_fatal (_("Cannot use special register with this instruction"));
 
       /* Width immediate value.  */
       if (strcmp (op_end, ""))
-	op_end = parse_imm (op_end + 1, &exp, MIN_IMM_WIDTH, MAX_IMM_WIDTH);
+        op_end = parse_imm (op_end + 1, &exp, MIN_IMM_WIDTH, MAX_IMM_WIDTH);
       else
-	as_fatal (_("Error in statement syntax"));
-
+        as_fatal (_("Error in statement syntax"));
       if (exp.X_op != O_constant)
 	{
-	  as_warn (_(
-	  "Symbol used as immediate width value for bit field instruction"));
-	  immed = 1;
-	}
+          as_warn (_("Symbol used as immediate width value for bit field instruction"));
+          immed = 1;
+        }
       else
-	immed = exp.X_add_number;
-
+        immed = exp.X_add_number;
       if (opcode->instr == bsefi && immed > 31)
-	as_fatal (_("Width value must be less than 32"));
+        as_fatal (_("Width value must be less than 32"));
 
       /* Shift immediate value.  */
       if (strcmp (op_end, ""))
-	op_end = parse_imm (op_end + 1, &exp, MIN_IMM, MAX_IMM);
+        op_end = parse_imm (op_end + 1, &exp, MIN_IMM, MAX_IMM);
       else
-	as_fatal (_("Error in statement syntax"));
-
+        as_fatal (_("Error in statement syntax"));
       if (exp.X_op != O_constant)
-	{
-	  as_warn (_(
-	  "Symbol used as immediate shift value for bit field instruction"));
-	  immed2 = 0;
-	}
+	    {
+          as_warn (_("Symbol used as immediate shift value for bit field instruction"));
+          immed2 = 0;
+        }
       else
-	{
-	  output = frag_more (isize);
-	  immed2 = exp.X_add_number;
-	}
-
+	    {
+          output = frag_more (isize);
+          immed2 = exp.X_add_number;
+	    }
       if (immed2 != (immed2 % 32))
-	{
-	  as_warn (_("Shift value greater than 32. using <value %% 32>"));
-	  immed2 = immed2 % 32;
-	}
+	    {
+          as_warn (_("Shift value greater than 32. using <value %% 32>"));
+          immed2 = immed2 % 32;
+        }
 
       /* Check combined value.  */
       if (immed + immed2 > 32)
-	as_fatal (_("Width value + shift value must not be greater than 32"));
+        as_fatal (_("Width value + shift value must not be greater than 32"));
 
       inst |= (reg1 << RD_LOW) & RD_MASK;
       inst |= (reg2 << RA_LOW) & RA_MASK;
-
       if (opcode->instr == bsefi)
-	inst |= (immed & IMM5_MASK) << IMM_WIDTH_LOW; /* bsefi */
+        inst |= (immed & IMM5_MASK) << IMM_WIDTH_LOW; /* bsefi */
       else
-	inst |= ((immed + immed2 - 1) & IMM5_MASK)
-		<< IMM_WIDTH_LOW; /* bsifi */
-
+        inst |= ((immed + immed2 - 1) & IMM5_MASK) << IMM_WIDTH_LOW; /* bsifi */
       inst |= (immed2 << IMM_LOW) & IMM5_MASK;
       break;
-
     case INST_TYPE_R1_R2:
       if (strcmp (op_end, ""))
         op_end = parse_reg (op_end + 1, &reg1);  /* Get r1.  */
diff --git a/opcodes/microblaze-dis.c b/opcodes/microblaze-dis.c
index ee447cecc3f..45135f9d264 100644
--- a/opcodes/microblaze-dis.c
+++ b/opcodes/microblaze-dis.c
@@ -113,7 +113,19 @@ get_field_immw (struct string_buf *buf, long instr)
 }
 
 static char *
-get_field_rfsl (struct string_buf *buf, long instr)
+get_field_imm5width (struct string_buf *buf, long instr)
+{
+  char *p = strbuf (buf);
+
+  if (instr & 0x00004000)
+    sprintf (p, "%d", (short)(((instr & IMM5_WIDTH_MASK) >> IMM_WIDTH_LOW))); /* bsefi */
+ else
+    sprintf (p, "%d", (short)(((instr & IMM5_WIDTH_MASK) >> IMM_WIDTH_LOW) - ((instr & IMM5_MASK) >> IMM_LOW) + 1)); /* bsifi */
+  return p;
+}
+
+static char *
+get_field_rfsl (struct string_buf *buf,long instr)
 {
   char *p = strbuf (buf);
 
@@ -462,6 +474,10 @@ print_insn_microblaze (bfd_vma memaddr, struct disassemble_info * info)
 	  print_func (stream, "\t%s, %s, %s, %s", get_field_rd (&buf, inst), get_field_r1(&buf, inst),
 		   get_field_immw (&buf, inst), get_field_imms (&buf, inst));
 	  break;
+        /* For bit field insns.  */
+	case INST_TYPE_RD_R1_IMM5_IMM5:
+          print_func (stream, "\t%s, %s, %s, %s", get_field_rd (&buf, inst),get_field_r1(&buf, inst),get_field_imm5width (&buf, inst), get_field_imm5 (&buf, inst));
+	     break;
 	/* For tuqula instruction */
 	case INST_TYPE_RD:
 	  print_func (stream, "\t%s", get_field_rd (&buf, inst));
diff --git a/opcodes/microblaze-opc.h b/opcodes/microblaze-opc.h
index afc1220e357..a952b9ac3c2 100644
--- a/opcodes/microblaze-opc.h
+++ b/opcodes/microblaze-opc.h
@@ -67,6 +67,9 @@
 #define INST_TYPE_RD_R1_IMML 23
 #define INST_TYPE_R1_IMML 24
 
+/* For bsefi and bsifi */
+#define INST_TYPE_RD_R1_IMM5_IMM5  21
+
 #define INST_TYPE_NONE 25
 
 
@@ -586,5 +589,8 @@ char pvr_register_prefix[] = "rpvr";
 #define MIN_IMML  ((long) 0xffffff8000000000L)
 #define MAX_IMML  ((long) 0x0000007fffffffffL)
 
+#define MIN_IMM_WIDTH  ((int) 0x00000001)
+#define MAX_IMM_WIDTH  ((int) 0x00000020)
+
 #endif /* MICROBLAZE_OPC */
 
-- 
2.34.1

